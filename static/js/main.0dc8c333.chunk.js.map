{"version":3,"sources":["components/search/search.styles.js","components/search/search.js","components/card/card.styles.js","components/card/card.js","components/card-list/card-list.js","components/home/home.styles.js","redux/monsters/monsters.types.js","redux/monsters/monsters.actions.js","redux/search/search.types.js","components/home/home.js","redux/search/search.actions.js","App.styles.js","components/post-list/post-list.styles.js","redux/posts/posts.types.js","redux/posts/posts.actions.js","components/post-list/post-list.js","redux/comments/comments.types.js","redux/comments/comments.actions.js","components/comment-list/comment-list.js","App.js","serviceWorker.js","redux/monsters/monsters.sagas.js","redux/posts/posts.sagas.js","redux/comments/comments.sagas.js","redux/root-saga.js","redux/monsters/monsters.reducers.js","redux/search/search.reducers.js","redux/posts/posts.reducers.js","redux/comments/comments.reducers.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["SearchInput","styled","input","Search","handleChange","placeholder","type","onChange","CardContainer","div","props","changeBg","css","MonsterName","email","Card","this","monster","imgSrc","id","src","alt","name","to","pathname","state","userName","React","Component","CardList","monsters","searchKey","filter","toLowerCase","includes","map","key","connect","monsterList","Button","button","primary","MonstersActionsTypes","FETCH_MONSTERS_START","FETCH_MONSTERS_SUCCESS","FETCH_MONSTERS_FAILURE","SET_SEARCH_KEY","fetchMonstersSuccess","payload","fetchMonstersFailure","error","SearchActionsTypes","Home","event","setSearchKey","target","value","handleBgChange","setState","fetchMonstersStart","onClick","dispatch","search_key","AppTitle","h4","Input","Textarea","textarea","PostsActionsTypes","FETCH_POSTS_START","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","UPDATE_POSTS","DELETE_POST","EDIT_POST","fetchPostsSuccess","posts","fetchPostsFailure","PostList","handleDelete","fetch","method","then","data","console","log","deletePost","catch","handleEdit","length","find","post","editMode","updatePosts","handleSave","editedPost","userId","title","body","headers","JSON","stringify","handleTitleChange","postId","handleBodyChange","match","params","fetchPostsStart","location","rows","search","postsList","editPost","newPost","CommentsActionsTypes","FETCH_COMMENTS_START","FETCH_COMMENTS_SUCCESS","FETCH_COMMENTS_FAILURE","fetchCommentsSuccess","comments","fetchCommentsFailure","CommentList","URLSearchParams","get","fetchCommentsStart","comment","commentsList","App","className","exact","path","component","Boolean","window","hostname","fetchMonstersAsync","onFetchMonstersStart","fetchMonsters","response","ok","Error","statusText","json","call","put","takeLatest","fetchPostsAsync","onFetchPostsStart","action","fetchPosts","fetchCommentsAsync","onFetchCommentsStart","fetchComments","rootSaga","all","INITIAL_STATE","monsterReducer","SET_MONSTER_LIST","searchReducer","postReducer","newPostsList","editedPostsList","commentReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middlewares","logger","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0dc8c333.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const SearchInput = styled.input`\n    margin: 30px 0;\n    width: 150px;\n    height: 30px;\n    background-position: 10px 10px; \n    :focus {\n        background-color: lightblue;\n    }\n`","import React from 'react';\nimport {SearchInput} from './search.styles';\n\nexport const Search = ({handleChange, placeholder}) => {\n    return <SearchInput type=\"search\" placeholder={placeholder} onChange={handleChange} />\n}","import styled, { css } from 'styled-components';\n\nexport const CardContainer = styled.div`\n    display: inline-block;\n    width: 30%;\n    margin: 20px;\n    padding-bottom: 20px;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    border-radius: 15px;\n    background: linear-gradient(to top, green, 30%, yellow);\n\n    ${props => props.changeBg && css`\n        background: linear-gradient(to top, blue, 30%, purple);\n    `}\n    :hover {\n        box-shadow: 0 16px 32px 0 rgba(0,0,0,0.2);\n        cursor: pointer;\n    }\n`;\n\nexport const MonsterName = styled.div`\n    font-size: 24px;\n    padding: 10px 0;\n    color: #793F06;\n    ${props => props.email && css`\n        font-size: 18px;\n        font-style: italic;\n        color: #ECEC0D;\n    `}\n`\n","import React from 'react';\nimport {CardContainer, MonsterName} from './card.styles';\nimport { Link } from \"react-router-dom\";\nclass Card extends React.Component {\n    render() {\n        const {monster,changeBg} = this.props;\n        const imgSrc = \"https://robohash.org/\" + monster.id;\n        return (\n            <CardContainer changeBg = {changeBg}>\n                <img src={imgSrc} alt='Monster' /><br />\n                <MonsterName>{monster.name}</MonsterName>\n                <MonsterName email>{monster.email}</MonsterName><br />\n                <Link to={{\n                    pathname:`/posts/${monster.id}`,\n                    state: {userName:monster.name}\n                }}> Posts </Link>\n            </CardContainer>\n        );\n    }\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card';\nimport {connect} from \"react-redux\";\n\nclass CardList extends React.Component {\n    render() {\n        const {monsters,searchKey,changeBg} = this.props;\n        return(\n            monsters && monsters\n            .filter(function(monster){\n                    const name = monster.name;\n                    return name.toLowerCase().includes(searchKey);\n                  },this)\n            .map(monster => \n                <Card key={monster.id} monster={monster} changeBg={changeBg} />\n            ) \n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    monsters: state.monsters.monsterList,\n    searchKey: state.searchKey.searchKey\n})\n\nexport default connect(mapStateToProps)(CardList);","import styled, { css } from 'styled-components';\nexport const Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: palevioletred;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n\n  ${props =>\n    props.primary &&\n    css`\n      background: palevioletred;\n      color: white;\n    `};\n`","const MonstersActionsTypes = {\n    FETCH_MONSTERS_START: \"FETCH_MONSTERS_START\",\n    FETCH_MONSTERS_SUCCESS: \"FETCH_MONSTERS_SUCCESS\",\n    FETCH_MONSTERS_FAILURE: \"FETCH_MONSTERS_FAILURE\",\n    SET_SEARCH_KEY: \"SET_SEARCH_KEY\"\n};\n\nexport default MonstersActionsTypes;","import MonstersActionsTypes from './monsters.types';\n\nexport const fetchMonstersStart = () => ({\n    type: MonstersActionsTypes.FETCH_MONSTERS_START\n})\n\nexport const fetchMonstersSuccess = (monsters) => ({\n    type: MonstersActionsTypes.FETCH_MONSTERS_SUCCESS,\n    payload: monsters\n})\n\nexport const fetchMonstersFailure = (error) => ({\n    type: MonstersActionsTypes.FETCH_MONSTERS_FAILURE,\n    payload: error\n})\n","const SearchActionsTypes = {\n    SET_SEARCH_KEY: \"SET_SEARCH_KEY\"\n};\n\nexport default SearchActionsTypes;","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Search} from '../search/search';\nimport CardList from '../card-list/card-list';\nimport {Button} from './home.styles';\nimport {fetchMonstersStart} from \"../../redux/monsters/monsters.actions\";\nimport {setSearchKey} from \"../../redux/search/search.actions\";\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            changeBg: false\n        };\n    }\n    handleChange = (event) => {\n        this.props.setSearchKey(event.target.value)\n    }\n    \n    handleBgChange = (event) => {\n        this.state.changeBg === false ? this.setState({changeBg:true}) : this.setState({changeBg:false});\n    }\n    \n    componentDidMount() {\n        this.props.fetchMonstersStart();\n    }\n\n    render() {\n        return (\n            <div>\n                <Search handleChange={this.handleChange} placeholder='Search monster' /> \n                <Button onClick={this.handleBgChange}> Change card background color </Button><br />\n                <CardList changeBg={this.state.changeBg} />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchMonstersStart: () => dispatch(fetchMonstersStart()),\n    setSearchKey: search_key => dispatch(setSearchKey(search_key))\n})\nexport default connect(null, mapDispatchToProps)(Home);","import SearchActionsTypes from './search.types';\n\nexport const setSearchKey = (searchKey) => ({\n    type: SearchActionsTypes.SET_SEARCH_KEY,\n    payload: searchKey\n})","import styled from 'styled-components';\n\nexport const AppTitle = styled.h4`\n    font-weight: bold;\n    font-size: 24px;\n    color: #3D85C6;\n    background-color:yellow;\n    width:250px;\n    margin: 20px auto;\n`\n\n","import styled from 'styled-components';\nexport const Button = styled.button`\n  background: green;\n  border-radius: 3px;\n  border: 2px solid yellow;\n  color: yellow;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n  font-weight: bold;\n  :hover {\n    background: linear-gradient(to top, green, 30%, #d5ff6c);\n    box-shadow: 0 16px 32px 0 rgba(0,0,0,0.2);\n    cursor: pointer;\n    }\n`\n\nexport const Input = styled.input`\n    width:400px;\n`\n\nexport const Textarea = styled.textarea`\n    width:400px;\n`","const PostsActionsTypes = {\n    FETCH_POSTS_START: \"FETCH_POSTS_START\",\n    FETCH_POSTS_SUCCESS: \"FETCH_POSTS_SUCCESS\",\n    FETCH_POSTS_FAILURE: \"FETCH_POSTS_FAILURE\",\n    UPDATE_POSTS: \"UPDATE_POSTS\",\n    DELETE_POST: \"DELETE_POST\",\n    EDIT_POST: \"EDIT_POST\"\n};\n\nexport default PostsActionsTypes;","import PostsActionsTypes from './posts.types';\n\nexport const fetchPostsStart = (userId) => {\n    return {\n        type: PostsActionsTypes.FETCH_POSTS_START,\n        payload: userId\n    }\n}\n\nexport const fetchPostsSuccess = (posts) => ({\n    type: PostsActionsTypes.FETCH_POSTS_SUCCESS,\n    payload: posts\n})\n\nexport const fetchPostsFailure = (error) => ({\n    type: PostsActionsTypes.FETCH_POSTS_FAILURE,\n    payload: error\n})\n\nexport const updatePosts = (posts) => ({\n    type: PostsActionsTypes.UPDATE_POSTS,\n    payload: posts\n})\n\nexport const deletePost = (id) => ({\n    type: PostsActionsTypes.DELETE_POST,\n    payload: id\n})\n\nexport const editPost = (newPost) => ({\n    type: PostsActionsTypes.EDIT_POST,\n    payload: newPost\n})","import React from 'react';\nimport {connect} from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {AppTitle} from '../../App.styles.js';\nimport { Button,Input,Textarea } from './post-list.styles';\nimport {CardContainer} from '../card/card.styles';\nimport {fetchPostsStart} from \"../../redux/posts/posts.actions\";\nimport {updatePosts} from \"../../redux/posts/posts.actions\";\nimport {deletePost} from \"../../redux/posts/posts.actions\";\nimport {editPost} from \"../../redux/posts/posts.actions\";\n\nclass PostList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userId:''\n        }\n    };\n    componentDidMount () {\n        const {userId} = this.props.match.params;\n        this.setState({ userId })\n        this.props.fetchPostsStart(userId);\n    }\n\n    handleDelete = (id) => {\n        fetch(`https://jsonplaceholder.typicode.com/posts/${id}`,\n            {\n                method: 'delete'\n            })\n          .then(data => {\n                console.log(\"delete response = \",data);\n                this.props.deletePost(id);\n            })\n          .catch(error => console.error(error));\n    }\n\n    handleEdit = (id) => {\n        const {posts} = this.props;\n        const editedPost = posts.length && posts.find(function(post) {\n            return post.id === id;\n        })\n        editedPost.editMode = true;\n        this.props.updatePosts([...posts]);\n    }\n\n    handleSave = (id) => {\n        const {posts} = this.props;\n        const editedPost = posts.length && posts.find(function(post) {\n            return post.id === id;\n        })\n        editedPost.editMode = false;\n        const data = {\n            id: id,\n            userId: this.state.userId,\n            title: editedPost.title,\n            body: editedPost.body\n        }\n        fetch(`https://jsonplaceholder.typicode.com/posts/${id}`,\n            {\n                method: 'put',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data)\n            })\n        .then(data => {\n                console.log(\"save response = \",data);\n                this.props.updatePosts([...posts]);\n            })\n        .catch(error => console.error(error));\n    }\n\n    handleTitleChange = (event, postId) => {\n        const {posts} = this.props;   \n        const editedPost = posts.length && posts.find(function(post) {\n            return post.id === postId;\n        })\n        editedPost.title = event.target.value;\n        this.props.updatePosts(posts);\n    }\n    handleBodyChange = (event, postId) => {\n        const {posts} = this.props;  \n        const editedPost = posts.length && posts.find(function(post) {\n            return post.id === postId;\n        })\n        editedPost.body = event.target.value;\n        this.props.updatePosts(posts);\n    }\n\n    render() {\n        const {posts} = this.props;\n        const {userName} =  this.props.location.state;\n        return (\n            <div>\n                <AppTitle>{userName} posts </AppTitle>\n                {posts.length && posts.map(post => \n                    <div key={post.id}>\n                        <CardContainer>\n                            <p>User id: {post.userId}</p>\n                            <p>Post id: {post.id}</p>\n                            <p>\n                                <label>Title:</label> <br />\n                                {\n                                    post.editMode ? \n                                    <Input value={post.title} \n                                        onChange={ (event) => this.handleTitleChange(event,post.id)} /> :\n                                    post.title\n                                }\n                                \n                            </p>\n                            <p>\n                                <label>Body: </label> <br />\n                                {\n                                    post.editMode ? \n                                    <Textarea rows=\"6\" onChange={(event) => this.handleBodyChange(event,post.id)} \n                                        value={post.body} /> :\n                                    post.body\n                                }\n                            </p>\n                            <p>\n                            <Link to={{\n                                    pathname: `/comments`,\n                                    search: `?postId=${post.id}`\n                                }}> Comments </Link>\n                            </p>\n                            <Button onClick = { () => this.handleDelete(post.id)}>Delete</Button>\n                            {\n                                post.editMode ? <Button onClick = { () => this.handleSave(post.id)}>Save</Button>:\n                                <Button onClick = { () => this.handleEdit(post.id) }>Edit</Button>\n                            }\n                        </CardContainer>\n                        \n                    </div>\n                \n                )} \n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchPostsStart: (userId) => dispatch(fetchPostsStart(userId)),\n    updatePosts: (posts) => dispatch(updatePosts(posts)),\n    deletePost: id => dispatch(deletePost(id)),\n    editPost: newPost => dispatch(editPost(newPost))\n})\n\nconst mapStateToProps = state => ({\n    posts: state.posts.postsList,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);","const CommentsActionsTypes = {\n    // SET_COMMENTS_LIST: \"SET_COMMENTS_LIST\",\n    FETCH_COMMENTS_START: \"FETCH_COMMENTS_START\",\n    FETCH_COMMENTS_SUCCESS: \"FETCH_COMMENTS_SUCCESS\",\n    FETCH_COMMENTS_FAILURE: \"FETCH_COMMENTS_FAILURE\",\n};\n\nexport default CommentsActionsTypes;","import CommentsActionsTypes from './comments.types';\n\nexport const setCommentsList = (comments) => ({\n    type: CommentsActionsTypes.SET_COMMENTS_LIST,\n    payload: comments\n})\n\nexport const fetchCommentsStart = (postId) => {\n    return {\n        type: CommentsActionsTypes.FETCH_COMMENTS_START,\n        payload: postId\n    }\n}\n\nexport const fetchCommentsSuccess = (comments) => ({\n    type: CommentsActionsTypes.FETCH_COMMENTS_SUCCESS,\n    payload: comments\n})\n\nexport const fetchCommentsFailure = (error) => ({\n    type: CommentsActionsTypes.FETCH_COMMENTS_FAILURE,\n    payload: error\n})\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {AppTitle} from '../../App.styles.js';\nimport {CardContainer} from '../card/card.styles';\nimport {fetchCommentsStart} from \"../../redux/comments/comments.actions\";\n\nclass CommentList extends React.Component {\n\n    componentDidMount () {\n        const params = new URLSearchParams(this.props.location.search);\n        const postId = params.get(\"postId\");\n        this.props.fetchCommentsStart(postId);\n    }\n\n    render() {\n        const {comments} = this.props;\n        return (\n            <div>\n                <AppTitle> Comment List</AppTitle>\n                {comments.length && comments.map(comment => \n                    <div key={comment.id}>\n                        <CardContainer>\n                            <p>Post id: {comment.postId}</p>\n                            <p>Comment id: {comment.id}</p>\n                            <p>Name: {comment.name}</p>\n                            <p>Email: {comment.email}</p>\n                            <p>Body: {comment.body}</p>\n                        </CardContainer>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCommentsStart: (postId) => dispatch(fetchCommentsStart(postId))\n})\n\nconst mapStateToProps = state => ({\n    comments: state.comments.commentsList,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentList);","import React from 'react';\nimport Home from './components/home/home';\nimport PostList from './components/post-list/post-list';\nimport CommentList from './components/comment-list/comment-list';\nimport { Route } from \"react-router-dom\";\nimport './App.css';\nimport {AppTitle} from './App.styles.js';\n\nclass App extends React.Component {\n  render() {\n    return(\n        <div className=\"App\">\n          <AppTitle>Monsters Rolodex</AppTitle>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/posts/:userId\" component={PostList} />\n          <Route path=\"/comments\" component={CommentList} />\n        </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import MonstersActionsTypes from './monsters.types';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {fetchMonstersSuccess, fetchMonstersFailure} from \"./monsters.actions\";\n\nexport function* fetchMonstersAsync() {\n    const fetchMonsters = () => fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        if (!response.ok) {\n            throw Error(response.statusText);\n        }\n        return response.json()\n      })\n  \n    try {\n      const monsters = yield call(fetchMonsters);\n      yield put(fetchMonstersSuccess(monsters));\n    } catch (error) {\n      yield put(fetchMonstersFailure(error));\n    }\n}\n  \nexport function* onFetchMonstersStart() {\n    yield takeLatest(MonstersActionsTypes.FETCH_MONSTERS_START, fetchMonstersAsync);\n}\n ","import PostsActionsTypes from './posts.types';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {fetchPostsSuccess, fetchPostsFailure} from \"./posts.actions\";\n\nexport function* fetchPostsAsync(action) {\n    const fetchPosts = (id) => fetch(`https://jsonplaceholder.typicode.com/posts?userId=${id}`)\n      .then(response => {\n        if (!response.ok) {\n            throw Error(response.statusText);\n        }\n        return response.json()\n      })\n  \n    try {\n      const posts = yield call(fetchPosts, action.payload);\n      yield put(fetchPostsSuccess(posts));\n    } catch (error) {\n      yield put(fetchPostsFailure(error));\n    }\n  }\n  \nexport function* onFetchPostsStart() {\n    yield takeLatest(PostsActionsTypes.FETCH_POSTS_START, fetchPostsAsync);\n}","import CommentsActionsTypes from './comments.types';\nimport {call, put, takeLatest} from \"redux-saga/effects\";\nimport {fetchCommentsSuccess, fetchCommentsFailure} from \"./comments.actions\";\n\nexport function* fetchCommentsAsync(action) {\n    const fetchComments = (id) => fetch(`https://jsonplaceholder.typicode.com/comments?postId=${id}`)\n      .then(response => {\n        if (!response.ok) {\n            throw Error(response.statusText);\n        }\n        return response.json()\n      })\n  \n    try {\n      const comments = yield call(fetchComments, action.payload);\n      yield put(fetchCommentsSuccess(comments));\n    } catch (error) {\n      yield put(fetchCommentsFailure(error));\n    }\n  }\n  \nexport function* onFetchCommentsStart() {\n    yield takeLatest(CommentsActionsTypes.FETCH_COMMENTS_START, fetchCommentsAsync);\n}","import {all, call} from \"redux-saga/effects\";\nimport {onFetchMonstersStart} from \"./monsters/monsters.sagas\";\nimport {onFetchPostsStart} from \"./posts/posts.sagas\"\nimport {onFetchCommentsStart} from \"./comments/comments.sagas\"\n\nexport default function* rootSaga() {\n    yield all(\n        [\n            call(onFetchMonstersStart),\n            call(onFetchPostsStart),\n            call(onFetchCommentsStart),\n        ]\n    );\n}","import MonstersActionsTypes from './monsters.types';\n\nconst INITIAL_STATE = {\n    monsterList: [],\n    error: null,\n}\nconst monsterReducer = (state = INITIAL_STATE,action) => {\n    switch(action.type) {\n        case  MonstersActionsTypes.SET_MONSTER_LIST:\n            return {\n                ...state,\n                monsterList: action.payload\n            }\n        case  MonstersActionsTypes.FETCH_MONSTERS_START:\n            return {\n                ...state\n            }\n        case  MonstersActionsTypes.FETCH_MONSTERS_SUCCESS:\n            return {\n                ...state,\n                monsterList: action.payload\n            }\n        case  MonstersActionsTypes.FETCH_MONSTERS_FAILURE:\n            return {\n                ...state,\n                error: action.payload\n            }\n        default: \n            return state;\n    }\n}\n\nexport default monsterReducer;","import SearchActionsTypes from './search.types';\n\nconst INITIAL_STATE = {\n    searchKey: ''\n}\n\nconst searchReducer = (state = INITIAL_STATE,action) => {\n    switch(action.type) {\n        case SearchActionsTypes.SET_SEARCH_KEY:\n            return {\n                ...state,\n                searchKey: action.payload\n            }\n        default: \n            return state; \n    }\n}\n\nexport default searchReducer;","import PostsActionsTypes from './posts.types';\n\nconst INITIAL_STATE = {\n    postsList: [],\n    error: null\n}\nconst postReducer = (state = INITIAL_STATE,action) => {\n    switch(action.type) {\n        case  PostsActionsTypes.FETCH_POSTS_START:\n            return {\n                ...state\n            }\n        case  PostsActionsTypes.FETCH_POSTS_SUCCESS:\n            return {\n                ...state,\n                postsList: action.payload\n            }\n        case  PostsActionsTypes.FETCH_POSTS_FAILURE:\n            return {\n                ...state,\n                error: action.payload\n            }\n        case PostsActionsTypes.DELETE_POST:\n            const newPostsList = state.postsList.filter((post) => action.payload !== post.id);\n\n            return {\n                ...state,\n                postsList: newPostsList\n            }\n        case  PostsActionsTypes.UPDATE_POSTS:\n            return {\n                ...state,\n                postsList: action.payload\n            }\n        case PostsActionsTypes.EDIT_POST:\n            const newPost = action.payload;\n            const posts = state.postsList;\n            const editedPostsList = posts.map(post => post.id === newPost.id ? newPost : post);\n            return {\n                ...state,\n                postsList: editedPostsList\n            }\n        default: \n            return state;\n    }\n}\n\nexport default postReducer;","import CommentsActionsTypes from './comments.types';\n\nconst INITIAL_STATE = {\n    commentsList: [],\n    error: null\n}\nconst commentReducer = (state = INITIAL_STATE,action) => {\n    switch(action.type) {\n        case  CommentsActionsTypes.FETCH_COMMENTS_START:\n        return {\n            ...state\n        }\n        case  CommentsActionsTypes.FETCH_COMMENTS_SUCCESS:\n            return {\n                ...state,\n                commentsList: action.payload\n            }\n        case  CommentsActionsTypes.FETCH_COMMENTS_FAILURE:\n            return {\n                ...state,\n                error: action.payload\n            }\n        default: \n            return state;\n    }\n}\n\nexport default commentReducer;","import {combineReducers} from \"redux\";\nimport monsterReducer from \"./monsters/monsters.reducers\";\nimport searchReducer from \"./search/search.reducers\";\nimport postReducer from \"./posts/posts.reducers\";\nimport commentReducer from \"./comments/comments.reducers\";\n\nexport default combineReducers({\n    monsters: monsterReducer,\n    searchKey: searchReducer,\n    posts: postReducer,\n    comments: commentReducer\n})","import {createStore, applyMiddleware} from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootSaga from \"./root-saga\";\nimport rootReducer from \"./root-reducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [logger, sagaMiddleware];\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from  \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename=\"/monsters\">\n            <App />    \n        </BrowserRouter>\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}